services:
  postgres:
    container_name: postgres_prod
    image: postgres:alpine
    environment:
      POSTGRES_USER: quy
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin_prod
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    mem_limit: 128m
    mem_reservation: 128m
    networks:
      - kafka

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    mem_limit: 512m
    mem_reservation: 128m
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka

  eureka-server:
    image: bigcool/eureka-server:auth0
    container_name: eureka-server
#    build:
#      context: my-app/eureka-server
#      dockerfile: Dockerfile
    mem_limit: 256m
    mem_reservation: 128m
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring

  fraud:
    image: bigcool/fraud-service:auth0
#    image: my-app/fraud
#    build:
#      context: my-app/fraud
#      dockerfile: Dockerfile
    mem_limit: 256m
    mem_reservation: 128m
    ports:
      - "8081-8084:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fraud
      - SPRING_DATASOURCE_USERNAME=quy
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    networks:
      - spring
      - postgres
    depends_on:
      - postgres
      - eureka-server
      - kafka-producer

  customer:
    image: bigcool/customer-service:auth0
    container_name: customer
#    build:
#      context: my-app/customer
#      dockerfile: Dockerfile
    mem_limit: 256m
    mem_reservation: 128m
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/customer
      - SPRING_DATASOURCE_USERNAME=quy
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    networks:
      - spring
      - postgres
    depends_on:
      - postgres
      - eureka-server
      - kafka-producer
      - fraud

  kafka-producer:
    image: bigcool/kafka-producer:auth0
    container_name: kafka-producer
#    build:
#      context: my-app/kafka-producer
#      dockerfile: Dockerfile
    mem_limit: 256m
    mem_reservation: 128m
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
    networks:
      - spring
      - kafka
    depends_on:
      - kafka
      - eureka-server

networks:
  postgres:
    driver: bridge
  spring:
    driver: bridge
  kafka:
    driver: bridge

volumes:
  postgres:
  pgadmin: