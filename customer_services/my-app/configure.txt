Integration test, unit test


cd D:\BE\env\kafka_2.13-3.3.1

# Start the ZooKeeper service
$ bin\windows\zookeeper-server-start.bat config\zookeeper.properties

# Start the Kafka broker service
$ bin\windows\kafka-server-start.bat config/server.properties

# Start docker
cd D:\BE\tut\my-app
docker compose up -d

# If postgres is installed => Change the default port to make it work

# Build jar files
mvn clean package spring-boot:repackage
mvn package spring-boot:repackage

# Build docker image and push to docker repository
cd customer_services
docker login

docker build -t bigcool/customer-service:auth0 customer
docker build -t bigcool/fraud-service:auth0 fraud
docker build -t bigcool/eureka-server:auth0 eureka-server
docker build -t bigcool/kafka-producer:auth0 kafka-producer

docker push bigcool/customer-service:auth0
docker push bigcool/fraud-service:auth0
docker push bigcool/eureka-server:auth0
docker push bigcool/kafka-producer:auth0

docker compose up -d --scale fraud=2

# Access and create DB
ssh -i "ev-team.pem" ubuntu@ec2-52-54-217-9.compute-1.amazonaws.com
https://dev-ev2.personifyinc.com/
docker exec -it postgres_prod bash
psql -U quy -W postgres
CREATE DATABASE fraud;

# Auth0
https://auth0.com/docs/quickstart/backend/java-spring-security5/01-authorization#configure-the-resource-server

// just ref
https://auth0.com/blog/spring-boot-authorization-tutorial-secure-an-api-java/

# Authentication
Change the diagram to indicate it is 3rd library

# POST/GET
SQL injection avoid => not accept any special
https://www.baeldung.com/sql-injection
https://sec.okta.com/articles/2020/12/sql-injection-java-practices-avoid

# PUT
Put the request into the body of API

